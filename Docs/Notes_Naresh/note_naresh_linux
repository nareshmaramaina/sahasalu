Stack

1) Identify non exceutable statement into symbol table // int a=20;
2) Tranlaate excutable statement into assemb,y instructions 


x-86 64 args passed thorugh accumulator 
std c 32 caller stack frames  // Function calling covention prefreeby ABI compiler 

32 bit system use c calling covention is default to standard  , 32 bit argument always allocated through caller function frame  ,by moving out in 


Linux 64 bit system function passes the arguments through  CPU accumulator  registers 


Steps to translate function call into equivalent assembly 

-> push the arguments on top of stock starting from right most 
-> Invoke the function using call instruction 
-> Read return value from eax 
-> release the space allocated for arguments 






system calls are inteface to kernel services, system calls reside in kernel segment 
ABI defines std sysytem call procedures 

invoking system calal 

Kernel =0 user mode = 1


Read eax 
Lookup system call and switch 
move argument to kernel stack 	Update SP register in stack pointer 



Memory descriptor struture of the process ( nm_struct ) contains pointers to start and end address of allocated heap

sbrk(0); // current position of program break
