Atomic fetch and operation functions
------------------------------------
        1. type __sync_fetch_and_add (type *ptr, type v, ...)
        2. type __sync_fetch_and_sub (type *ptr, type v, ...)
        3. type __sync_fetch_and_or (type *ptr, type v, ...)
        4. type __sync_fetch_and_and (type *ptr, type value, ...)
        5. type __sync_fetch_and_xor (type *ptr, type value, ...)

        All above functions return the value that had previously been in memory
        before performing the suggested operations.

Atomic operation and fetch functions
------------------------------------
        1. type __sync_add_and_fetch (type *ptr, type value, ...)
        2. type __sync_sub_and_fetch (type *ptr, type value, ...)
        3. type __sync_or_and_fetch (type *ptr, type value, ...)
        4. type __sync_and_and_fetch (type *ptr, type value, ...)
        5. type __sync_xor_and_fetch (type *ptr, type value, ...)
        6. type __sync_nand_and_fetch (type *ptr, type value, ...)

        All above functions return the new value in memory after performing
        the suggested operations.
































Software lock operations using atomic instructions
-----------------------------------------------------------
typedef struct {
	int lck;
	wait_queue_t queue;
}sem_t;


int poll_lock(sem_t *lock)
{
	while (lock->lck!= 0);
	__sync_add_and_fetch(lock->lck, 1);
	return 0;
}	

int poll_unlock(sem_t *lock)
{
        __sync_sub_and_fetch(lock->lck, 1);
        return 0;
}



sem_t sem;
main()
{
	lock(&sem);
		/* code to access shared data */
	unlock(&sem);
}
Mutual exclusion framework implementations

1. wait locks ( semaphore, mutex)
2. Poll locks ( spinlock)







